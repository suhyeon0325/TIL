USE mydata;

SELECT * FROM dataset2;

# Division Name별 평균 평점
SELECT 
	`Division Name`
    , AVG(RATING) AVG_RATE
FROM dataset2
GROUP BY 1
ORDER BY 2 DESC;

-- Department별 평균 평점
SELECT 
	`Department Name`
    , AVG(RATING) AVG_RATE
FROM dataset2
GROUP BY 1
ORDER BY 2 DESC;

-- Trend 평점 3점 이하 리뷰
SELECT *
FROM dataset2
WHERE `Department Name` = 'Trend'
	AND RATING <= 3;
    
-- case when
SELECT CASE WHEN AGE BETWEEN 0 AND 9 THEN '0009'
WHEN AGE BETWEEN 10 AND 19 THEN '1019'
WHEN AGE BETWEEN 20 AND 29 THEN '2029'
WHEN AGE BETWEEN 30 AND 39 THEN '3039'
WHEN AGE BETWEEN 40 AND 49 THEN '4049'
WHEN AGE BETWEEN 50 AND 59 THEN '5059'
WHEN AGE BETWEEN 60 AND 69 THEN '6069'
WHEN AGE BETWEEN 70 AND 79 THEN '7079'
WHEN AGE BETWEEN 80 AND 89 THEN '8089'
WHEN AGE BETWEEN 90 AND 99 THEN '9099' END AGEBAND,
AGE
FROM MYDATA.DATASET2
WHERE `DEPARTMENT NAME` = 'Trend'
AND RATING <= 3
;

-- 연령대 10으로
SELECT
	`DEPARTMENT NAME`
	, FLOOR(AGE/10) * 10 AGEBAND
    , AGE
FROM dataset2
WHERE `DEPARTMENT NAME` = 'Tops'
	AND RATING <= 3
;

-- Trend의 평점 3점 이하 리뷰의 연령 분포
SELECT
	FLOOR(AGE/10) * 10 AGEBAND
    , COUNT(*) AS 명수
FROM dataset2
WHERE `DEPARTMENT NAME` = 'Trend'
	AND RATING <= 3
GROUP BY 1
ORDER BY 2 DESC
;

-- Trend의 전체 연령별 리뷰 수 구하기
SELECT
	FLOOR(AGE/10) * 10 AGEBAND
    , COUNT(*) AS 명수
FROM dataset2
WHERE `DEPARTMENT NAME` = 'Trend'
GROUP BY 1
ORDER BY 2 DESC
;

-- Trend 전체 리뷰 수 : 30, 40, 50 순으로 작성
-- 평점 3점 이하 : 50대의 리뷰수가 상대적으로 많음
SELECT *
FROM dataset2
WHERE `Department name` = 'Trend'
AND RATING <= 3
AND AGE BETWEEN 50 AND 59 LIMIT 10
;

-- 평점이 낮은 상품의 주요 Complain 찾기
-- Department별 평점이 낮은 10개 상품을 임시 테이블로 생성
-- 순위
SELECT
	`DEPARTMENT NAME`
    , `CLOTHING ID`
    , AVG(RATING) AVG_RATE
FROM dataset2
GROUP BY 1, 2
;

-- DEPARTMENT별 AVG_RATE 순위 생성
-- 평점이 가장 낮은것이 1위
-- ROW_NUMBER()의 RNK
SELECT
	`DEPARTMENT NAME`
	, `CLOTHING ID`
    , AVG(RATING) AVG_RATE
	, ROW_NUMBER() OVER (ORDER BY AVG(RATING)) AS RNK
FROM dataset2
GROUP BY 1,2
ORDER BY 4
;

CREATE TABLE mydata.stat AS 
SELECT * FROM
(
	SELECT *
    , ROW_NUMBER() OVER(PARTITION BY `DEPARTMENT NAME` ORDER BY AVG_RATE) RNK
    FROM (
		SELECT 
			`DEPARTMENT NAME`
            , `CLOTHING ID`
            , AVG(RATING) AVG_RATE 
		FROM dataset2
        GROUP BY 1, 2
    ) A
) A 
WHERE RNK <= 10
;

SELECT * FROM stat;

-- Bottoms의 평점이 낮은 10개 상품의 Clothing ID 조회
SELECT `CLOTHING ID`
FROM stat
WHERE `DEPARTMENT NAME` = 'Bottoms'
;

-- 평점이 낮은 10개 상품의 Clothing ID의 리뷰를 확인하고 싶은 것
-- 메인쿼리 : 리뷰 확인
-- 서브쿼리 : 평점이 낮은 10개 상품의 Clothing ID
SELECT `Clothing ID`, `Review Text`
FROM dataset2
WHERE `Clothing ID` IN(
	SELECT `Clothing ID`
    FROM stat
    WHERE `DEPARTMENT NAME` = 'Bottoms'
);

-- TF-IDF : 텍스트 마이닝
SELECT
	`Department Name`
    , FLOOR(AGE/10) * 10 AGEBAND
    , AGE(RATING) AVG_RATING
FROM dataset2
GROUP BY 1, 2
;

-- 연령대별 평균 점수
SELECT
	`Department Name`
    , FLOOR(AGE/10) * 10 AGEBAND
    , AVG(RATING) AVG_RATING
	, ROW_NUMBER() OVER (ORDER BY AVG(RATING)) AS RNK
FROM dataset2
GROUP BY 1, 2
ORDER BY 3
;

-- P.144 SIZE COMPLAIN
SELECT
	`REVIEW TEXT`
    , CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END SIZE_YN
FROM dataset2
;

SELECT
	SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) N_SIZE
    , COUNT(*) N_TOTAL
FROM dataset2
;

SELECT
	SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) N_SIZE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LARGE%' THEN 1 ELSE 0 END) N_LARGE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LOOSE%' THEN 1 ELSE 0 END) N_LOOSE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SMALL%' THEN 1 ELSE 0 END) N_SMALL
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%TIGHT%' THEN 1 ELSE 0 END) N_TIGHT
	, SUM(1) N_TOTAL   
FROM dataset2
;

-- 제품군별로 Complain 상황 확인
SELECT
	`Department Name`
	, SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) N_SIZE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LARGE%' THEN 1 ELSE 0 END) N_LARGE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LOOSE%' THEN 1 ELSE 0 END) N_LOOSE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SMALL%' THEN 1 ELSE 0 END) N_SMALL
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%TIGHT%' THEN 1 ELSE 0 END) N_TIGHT
	, SUM(1) N_TOTAL   
FROM dataset2
GROUP BY 1
;

-- 연령, 제품군별
SELECT
	FLOOR(AGE/10) *10 AGEBAND
	, `Department Name`
	, SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) N_SIZE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LARGE%' THEN 1 ELSE 0 END) N_LARGE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LOOSE%' THEN 1 ELSE 0 END) N_LOOSE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SMALL%' THEN 1 ELSE 0 END) N_SMALL
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%TIGHT%' THEN 1 ELSE 0 END) N_TIGHT
	, SUM(1) N_TOTAL   
FROM dataset2
GROUP BY 1, 2
ORDER BY 1, 2
;

-- 연령, 제품군별
SELECT
	FLOOR(AGE/10) *10 AGEBAND
	, `Department Name`
	, SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END)/SUM(1) N_SIZE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LARGE%' THEN 1 ELSE 0 END)/SUM(1) N_LARGE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LOOSE%' THEN 1 ELSE 0 END)/SUM(1) N_LOOSE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SMALL%' THEN 1 ELSE 0 END)/SUM(1) N_SMALL
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%TIGHT%' THEN 1 ELSE 0 END)/SUM(1) N_TIGHT
	, SUM(1) N_TOTAL   
FROM dataset2
GROUP BY 1, 2
ORDER BY 1, 2
;

-- Size 타입을 추가해 집계한다. 
-- 기준 Clothing ID 
SELECT 
	`CLOTHING ID`
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) N_SIZE_T
	, SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) / SUM(1) N_SIZE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LARGE%' THEN 1 ELSE 0 END)  / SUM(1) N_LARGE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LOOSE%' THEN 1 ELSE 0 END)  / SUM(1) N_LOOSE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SMALL%' THEN 1 ELSE 0 END)  / SUM(1) N_SMALL
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%TIGHT%' THEN 1 ELSE 0 END)  / SUM(1) N_TIGHT
FROM dataset2
GROUP BY 1
;

CREATE TABLE mydata.SIZE_STAT AS
SELECT 
	`CLOTHING ID`
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) N_SIZE_T
	, SUM(CASE WHEN `REVIEW TEXT` LIKE '%SIZE%' THEN 1 ELSE 0 END) / SUM(1) N_SIZE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LARGE%' THEN 1 ELSE 0 END)  / SUM(1) N_LARGE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%LOOSE%' THEN 1 ELSE 0 END)  / SUM(1) N_LOOSE
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%SMALL%' THEN 1 ELSE 0 END)  / SUM(1) N_SMALL
    , SUM(CASE WHEN `REVIEW TEXT` LIKE '%TIGHT%' THEN 1 ELSE 0 END)  / SUM(1) N_TIGHT
FROM dataset2
GROUP BY 1
;

SELECT * FROM size_stat;